/* _abilities.css */
/* Abilities Section */

/* Tier Headers */
.tier-header {
    font-size: 1.3rem;
    color: #FFF;
    margin-top: 2rem;
    margin-bottom: 1.5rem;
    padding-left: 0.5rem;
    border-left: 4px solid #FFD700;
    background-color: #2A2A2A;
    padding: 0.7rem 1rem;
    border-radius: 4px;
}

.abilities-section {
    margin-top: 1.5rem;
}

.abilities-section h4 {
    margin-bottom: 1rem;
    color: #FFD700; /* Keeping gold for section headers as per existing theme */
    border-bottom: 1px solid rgb(56, 56, 56); /* Updated to new default border */
    padding-bottom: 0.5rem;
}

/* NEW: Grid container for multiple ability cards per row */
.abilities-grid-container {
    display: grid;
    /* Updated: Use minmax(min-content, 1fr) to allow single column to fill width,
       or auto-fit instead of auto-fill for better single-column stretching when content is small. */
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    padding: 0.5rem 0;
}

.abilities-grid-container .ability-container {
    margin-bottom: 0;
}

/* The actual clickable ability card */
.ability-card {
    background: #252525; /* Updated to new background color */
    padding: 1.2rem 1.5rem;
    border-radius: 8px;
    border: 1px solid rgb(56, 56, 56); /* Updated to new default border */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    display: flex;
    flex-direction: column;
    height: 100%;
    transition: all 0.2s ease-in-out;
}

.ability-card:hover:not(.selected) {
    border-color: #FFD700; /* Gold border on hover */
    background-color: #3A3A3A; /* Updated to secondary accent background */
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
}

.ability-card.selected {
    border-color: #FFD700; /* Updated to primary accent border */
    background-color: #B22222; /* Updated to primary accent background */
    box-shadow: 0 4px 15px rgba(178, 34, 34, 0.4); /* Shadow color based on primary accent */
}

.ability-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.8rem;
}

.ability-header label {
    display: flex;
    align-items: center;
    cursor: pointer;
    font-size: 1.1rem;
    font-weight: bold;
    color: #FFD700; /* Keeping gold for headers/labels */
}

/* Hide the actual checkbox/radio inputs for the main ability card selection */
.ability-header input[type="checkbox"],
.ability-header input[type="radio"] {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    width: 0;
    height: 0;
    opacity: 0;
    position: absolute;
    pointer-events: none;
}


.ability-name {
    flex-grow: 1;
}

.ability-types {
    display: flex;
    gap: 0.5rem;
}

.type-tag {
    background-color: #333;
    color: #E0E0E0;
    padding: 0.3em 0.6em;
    border-radius: 4px;
    font-size: 0.75rem;
    text-transform: uppercase;
    border: 1px solid #555;
}

.ability-description {
    font-size: 0.9rem;
    color: #E0E0E0;
    margin-bottom: 1rem;
}

.ability-options {
    margin-top: 1rem;
    padding: 1.2rem 1.5rem;
    border-top: 1px solid rgb(56, 56, 56);
}

.ability-card.selected .ability-options {
    background-color: #252525;
    border-top: 1px solid #FFD700;
    border-right: 1px solid #FFD700;
    border-bottom: 1px solid #FFD700;
    border-left: 1px solid #FFD700;
}

.ability-card.disabled-for-selection {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
    transition: opacity 0.3s ease;
}

.ability-options p {
    font-size: 0.95rem;
    color: #FFD700;
    margin-bottom: 0.8rem;
    font-weight: bold;
}

/* Styles for individual ability options (labels wrapping inputs and text) */
.ability-option {
    display: flex;
    align-items: flex-start;
    margin-bottom: 0.8rem;
    cursor: pointer;
    font-size: 0.9rem;
    color: #E0E0E0;
    padding: 0.5rem 0.8rem; /* Added padding to the label */
    border-radius: 4px;
    border: 1px solid transparent; /* Default transparent border for label */
    transition: all 0.2s ease-in-out;
}

.ability-option:last-child {
    margin-bottom: 0;
}

/* Hide the actual input within the nested ability options */
.ability-option input[type="checkbox"],
.ability-option input[type="radio"] {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    width: 0;
    height: 0;
    opacity: 0;
    position: absolute;
    pointer-events: none; /* Crucial to prevent direct interaction */
}

/* NEW: Styles for the visual representation of the checkbox/radio */
.ability-option .option-visual {
    display: inline-block;
    width: 1.1em;
    height: 1.1em;
    margin-right: 0.7rem; 
    margin-top: 0.2rem;   
    flex-shrink: 0;
    border: 2px solid rgb(56, 56, 56);
    background-color: #252525;
    cursor: pointer;
    position: relative; /* For pseudo-elements */
    transition: all 0.2s ease-in-out;
}

/* Specific shapes for visual checkbox/radio */
.ability-option input[type="checkbox"] + .option-visual {
    border-radius: 4px;
}

.ability-option input[type="radio"] + .option-visual {
    border-radius: 50%;
}

/* NEW: Styles when the hidden input is checked */
.ability-option input[type="checkbox"]:checked + .option-visual,
.ability-option input[type="radio"]:checked + .option-visual {
    background-color: #FFD700; /* Gold background for the visual indicator */
    border-color: #FFD700; /* Gold border for the visual indicator */
}

/* NEW: Checkmark for custom checkbox */
.ability-option input[type="checkbox"]:checked + .option-visual::before {
    content: '\2713';
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 1em;
    line-height: 1;
    color: #252525; /* Dark color for contrast against gold */
}

/* NEW: Inner dot for custom radio button */
.ability-option input[type="radio"]:checked + .option-visual::after {
    content: '\00a0'; /* Non-breaking space for robust rendering */
    display: block;
    width: 0.5em;
    height: 0.5em;
    border-radius: 50%;
    background-color: #252525; /* Dark color for contrast against gold */
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

/* NEW: Highlight the entire label when the input is checked */
.ability-option input[type="checkbox"]:checked ~ .option-text-content,
.ability-option input[type="radio"]:checked ~ .option-text-content {
    color: #FFD700; /* Gold text for selected option */
}
/* You might also want to apply a background/border to the entire label
   when its input is checked for a stronger visual cue like your main abilities.
   This would require the `:has()` selector, which is not universally supported yet.
   For now, the visual indicator and text color change will serve.
   If you want the whole row to highlight, let me know, and we can explore `:has()`
   or a JS-based class toggle for the label. */
.ability-option:has(input[type="checkbox"]:checked),
.ability-option:has(input[type="radio"]:checked) {
    background-color: #3A3A3A; /* Secondary accent for selected option row */
    border-color: #FFD700; /* Gold border for selected option row */
}


/* Disabled state for inputs (these rules now apply to the hidden inputs directly) */
.ability-option input[type="checkbox"]:disabled + .option-visual,
.ability-option input[type="radio"]:disabled + .option-visual {
    opacity: 0.5;
    cursor: not-allowed;
    border-color: #FFD700; /* Use your existing disabled color */
    background-color: #B22222; /* Use your existing disabled color */
}

/* Disabled text for the label's content (span) */
.ability-option input[type="checkbox"]:disabled ~ .option-text-content,
.ability-option input[type="radio"]:disabled ~ .option-text-content {
    color: #777;
    cursor: not-allowed;
    opacity: 0.7;
}

/* Hover effect on the custom input visual */
.ability-option input[type="checkbox"]:hover:not(:disabled) + .option-visual,
.ability-option input[type="radio"]:hover:not(:disabled) + .option-visual {
    border-color: #FFD700;
    box-shadow: 0 0 5px rgba(255, 215, 0, 0.5);
}

/* Specific styles for ACTIVE ability type tag */
.type-tag.active {
    background-color: #B22222;
    color: white;
    border-color: #FFD700;
}

/* Specific styles for PASSIVE ability type tag */
.type-tag.passive {
    background-color: #4CAF50;
    color: white;
    border-color: #FFD700;
}

@media (max-width: 768px) {
    .abilities-grid-container {
        grid-template-columns: 1fr;
    }
}
